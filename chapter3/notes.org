* Exercise 3.1
An accumulator is a procedure that is called repeatedly with a single numeric argument and
accumulates its arguments into a sum. Each time it is called, it returns the currently accumulated
sum. Write a procedure make-accumulator that generates accumulators, each maintaining an independent
sum. The input to make-accumulator should specify the initial value of the sum; for example.

#+BEGIN_SRC scheme :results output
  (define (make-accumulator a)
    (lambda (value)
      (set! a (+ value a))
      a))

  (define A (make-accumulator 5))
  (display (A 10))
  (newline)
  (display (A 10))
#+END_SRC

#+RESULTS:
: 15
: 25

* Exercise 3.2
 In software-testing applications, it is useful to be able to count the number of times a given
procedure is called during the course of a computation. Write a procedure make-monitored that takes
as input a procedure, f, that itself takes one input. The result returned by make-monitored is a
third procedure, say mf, that keeps track of the number of times it has been called by maintaining
an internal counter. If the input to mf is the special symbol how-many-calls?, then mf returns the
value of the counter. If the input is the special symbol reset-count, then mf resets the counter to
zero. For any other input, mf returns the result of calling f on that input and increments the
counter. For instance, we could make a monitored version of the sqrt procedure:

#+BEGIN_SRC scheme :results output
  (define (make-monitored f)
    (define call-count 0)

    (define (mf arg)
      (set! call-count (+ call-count 1))
      (f arg))

    (define (how-many-calls?) call-count)

    (define (reset-count)
      (set! call-count 0)
      call-count)

    (lambda (method)
      (cond ((eq? method 'how-many-calls?) (how-many-calls?))
            ((eq? method 'reset-count) (reset-count))
            (else (mf method)))))

  (define s (make-monitored sqrt))
  (display (s 100))
  (newline)
  (display (s 25))
  (newline)
  (display (s 'how-many-calls?))
  (newline)
  (s 'reset-count)
  (display (s 625))
  (newline)
  (display (s 'how-many-calls?))
#+END_SRC

#+RESULTS:
: 10
: 5
: 2
: 25
: 1
* Exercise 3.3
Modify the make-account procedure so that it creates password-protected accounts.

#+NAME: exercise_3.3
#+BEGIN_SRC scheme :session t
    (define (make-account balance password)

      (define (deposit amount)
        (cond ((< amount 0) (error "Cannot deposit a negative value"))
              (else
               (set! balance (+ balance amount))
               balance)))

      (define (withdraw amount)
        (cond ((< amount 0) (error "Cannot withdraw a negative value"))
              ((< balance amount) (error "Insufficient funds"))
              (else
               (set! balance (- balance amount))
               balance)))
      (lambda (provided-password method)
        (cond ((not (eq? password provided-password)) (error "Incorrect password"))
              ((eq? method 'withdraw) withdraw)
              ((eq? method 'deposit) deposit)
              (else "Bad method"))))

    (define acc (make-account 100 'secret-password))
#+END_SRC

#+RESULTS:
: 60
: 75
* Exercise 3.4

Modify the make-account procedure of exercise 3.3 by adding another local state variable so that, if
an account is accessed more than seven consecutive times with an incorrect password, it invokes the
procedure call-the-cops.

#+BEGIN_SRC scheme :results output

  (define (make-account balance password)
    (define bad-password-given 0)

    (define (deposit amount)
      (cond ((< amount 0) (error "Cannot deposit a negative value"))
            (else
             (set! balance (+ balance amount))
             balance)))

    (define (withdraw amount)
      (cond ((< amount 0) (error "Cannot withdraw a negative value"))
            ((< balance amount) (error "Insufficient funds"))
            (else
             (set! balance (- balance amount))
             balance)))

    (define (incorrect-password)
      (cond ((>= bad-password-given 7) "Calling the cops!")
            (else
             (set! bad-password-given (+ bad-password-given 1))
             "Bad password given. Try again")))

    (lambda (provided-password method)
      (cond ((not (eq? password provided-password)) (lambda (v) (incorrect-password)))
            ((eq? method 'withdraw) withdraw)
            ((eq? method 'deposit) deposit)
            (else "Bad method"))))

  (define acc (make-account 100 'secret-password))

  (display ((acc 'secret-password 'withdraw) 40))
  (newline)
  (display ((acc 'secret-password 'deposit) 15))
  (newline)
  (display ((acc 'bad-password 'withdraw) 50))
  (newline)
  (display ((acc 'bad-password 'withdraw) 50))
  (newline)
  (display ((acc 'bad-password 'withdraw) 50))
  (newline)
  (display ((acc 'bad-password 'withdraw) 50))
  (newline)
  (display ((acc 'bad-password 'withdraw) 50))
  (newline)
  (display ((acc 'bad-password 'withdraw) 50))
  (newline)
  (display ((acc 'bad-password 'withdraw) 50))
  (newline)
  (display ((acc 'bad-password 'withdraw) 50))
#+END_SRC

#+RESULTS:
#+begin_example
60
75
Bad password given. Try again
Bad password given. Try again
Bad password given. Try again
Bad password given. Try again
Bad password given. Try again
Bad password given. Try again
Bad password given. Try again
Calling the cops!
#+end_example

#+RESULTS:
* Example 3.1.2
The monte carlo approximation calculates an approximation to PI by a statistical method where,
given two integers at random, the probabilty for that their GCD is 1 (they don't have a common
divisor) is 6/pi^2. This method is discussed on Knuth 1981.

#+NAME: example_3.1.2
#+BEGIN_SRC scheme :session t
  (define (estimate-pi trials)
    (sqrt (/ 6 (monte-carlo trials cesaro-test))))

  (define (cesaro-test)
    (= (gcd (random 100000) (random 1000000)) 1))

  (define (monte-carlo trials experiment)
    (define (iter trials-remaining trials-passed)
      (cond ((= trials-remaining 0)
             (/ trials-passed trials))
            ((experiment)
             (iter (- trials-remaining 1) (+ trials-passed 1)))
            (else
             (iter (- trials-remaining 1) trials-passed))))
    (iter trials 0))
#+END_SRC

#+RESULTS: example_3.1.2

#+RESULTS: example_3.1.2
: 3.1404298429767854

Stanislaw Ulam developed the modern Monte Carlo method during his time researching nuclear power at
Los Alamos in the lates 40's. It's indeed incredible how randomness can lead to complete valid
results for deterministic scenarios.

* Exercise 3.5
Monte Carlo integration is a method of estimating definite integrals by means of Monte Carlo
simulation. Consider computing the area of a region of space described by a predicate P(x, y) that
is true for points (x, y) in the region and false for points not in the region. For example, the
region contained within a circle of radius 3 centered at (5, 7) is described by the predicate that
tests whether (x - 5)^2 + (y - 7)^2 \leq 3^2. To estimate the area of the region described by such a
predicate, begin by choosing a rectangle that contains the region. For example, a rectangle with
diagonally opposite corners at (2, 4) and (8, 10) contains the circle above. The desired integral is
the area of that portion of the rectangle that lies in the region. We can estimate the integral by
picking, at random, points (x,y) that lie in the rectangle, and testing P(x, y) for each point to
determine whether the point lies in the region. If we try this with many points, then the fraction
of points that fall in the region should give an estimate of the proportion of the rectangle that
lies in the region. Hence, multiplying this fraction by the area of the entire rectangle should
produce an estimate of the integral.

Implement Monte Carlo integration as a procedure estimate-integral that takes as arguments a
predicate P, upper and lower bounds x1, x2, y1, and y2 for the rectangle, and the number of trials
to perform in order to produce the estimate. Your procedure should use the same monte-carlo
procedure that was used above to estimate \pi. Use your estimate-integral to produce an estimate of 
by measuring the area of a unit circle.

#+BEGIN_SRC scheme :session t :results output :var foo=example_3.1.2
  (define (generate-predicate radius a b)
    (lambda (x y)
      (<= (+ (expt (- x a) 2)
             (expt (- y b) 2))
          (expt radius 2))))

  (define (random-in-range low high)
    (let ((range (- high low)))
      (+ low (random range))))

  (define (estimate-integral P x1 x2 y1 y2 trials)
    (define (in-region?)
      (P (random-in-range x1 x2)
      (random-in-range y1 y2)))

    (* (* (- x2 x1) (- y2 y1))
       (monte-carlo trials in-region?)))

  (display (estimate-integral (generate-predicate 3 5 7) 2 8 4 10 2000000))
#+END_SRC

#+RESULTS:
: "6753429/250000"
* Exercise 3.6
It is useful to be able to reset a random-number generator to produce a sequence starting from a 
given value. Design a new rand procedure that is called with an argument that is either the symbol 
generate or the symbol reset and behaves as follows: (rand 'generate) produces a new random number;
((rand 'reset) <new-value>) resets the internal state variable to the designated <new-value>. Thus,
by resetting the state, one can generate repeatable sequences. These are very handy to have when
testing and debugging programs that use random numbers.

* Exercise 3.7
Consider the bank account objects created by make-account, with the password 
modification described in exercise 3.3. Suppose that our banking system requires
the ability to make joint accounts. Define a procedure make-joint that 
accomplishes this. Make-joint should take three arguments. The first is a 
password-protected account. The second argument must match the password with 
which the account was defined in order for the make-joint operation to proceed. 
The third argument is a new password. Make-joint is to create an additional 
access to the original account using the new password. For example, if peter-acc
is a bank account with password open-sesame, then

(define paul-acc
  (make-joint peter-acc 'open-sesame 'rosebud))

will allow one to make transactions on peter-acc using the name paul-acc and the
password rosebud. You may wish to modify your solution to exercise 3.3 to 
accommodate this new feature.

#+BEGIN_SRC scheme :session t :results output :var foo=exercise_3.3
  (define (make-joint account pass joint-pass)
    (define (joint-withdraw amount)
      ((account pass 'withdraw) amount))

    (define (joint-deposit amount)
      ((account pass 'deposit) amount))

    (lambda (provided-password method)
      (cond ((not (eq? joint-pass provided-password)) (error "Incorrect password"))
            ((eq? method 'withdraw) joint-withdraw)
            ((eq? method 'deposit) joint-deposit)
            (else "Bad method"))))

  (define peter-acc (make-account 1000 'open-sesame))
  (define paul-acc (make-joint peter-acc 'open-sesame 'rosebud))

  ;; 800
  (display ((peter-acc 'open-sesame 'withdraw) 200))
  (newline)
  ;; 700
  (display ((paul-acc 'rosebud 'withdraw) 100))
  (newline)
  ;; 900
  (display ((peter-acc 'open-sesame 'deposit) 200))
  (newline)
  ;; 1900
  (display ((paul-acc 'rosebud 'deposit) 1000))
#+END_SRC

#+RESULTS:
: "800\n700\n900\n1900"
* Exercise 3.8
When we defined the evaluation model in section 1.1.3, we said that the first 
step in evaluating an expression is to evaluate its subexpressions. But we never
specified the order in which the subexpressions should be evaluated (e.g., left
 to right or right to left). When we introduce assignment, the order in which 
the arguments to a procedure are evaluated can make a difference to the result.
Define a simple procedure f such that evaluating (+ (f 0) (f 1)) will return 0 
if the arguments to + are evaluated from left to right but will return 1 if the 
arguments are evaluated from right to left.

#+BEGIN_SRC scheme :results output
  (define val)
  (define (f value)
    (cond ((number? val)
           (set! val (* value val))
           val)
          (else
           (set! val value)
           val)))

  (display (f 0))
  (newline)
  (display (f 1))

#+END_SRC

#+RESULTS:
: "0\n0"

* Exercise 3.9
Show the environment structures created by evaluating (factorial 6) using each version of the
factorial procedure.14.

Not very practical to draw a diagram in characters, so I'll try to describe how it would look.

With the recursive version, there will be N executions of the `factorial` function. With each call
it will create a new frame, which is child of the previous one. The initial call is a child of the
global frame.

With the iterative version, `factorial` will create N frames for each call of `fact-iter`, where
each frame would be a sibling of each other.
* Exercise 3.10
Show that the two versions of make-withdraw create objects with the same behavior. How do the
environment structures differ for the two versions?

Not very practical to draw a diagram in characters, so I'll try to describe how it would look.

The original `make-withdraw` will create a frame where the `balance` property will hold some value
it will return a procedure whose frame is a child of the one created by `make-withdraw`. When the
procedure returned by `make-withdraw` performs an operation on `balance`, it will retrieve the value
from `make-withdraw`'s frame, that is, its parent.

If using `let`, `make-withdraw` will define a new frame, which will isolate the `balance` property
 on its own frame. This isolation will return a lambda which has access to the frame created by
`let`, that is, there will be an additional frame in the hierarchy.
* Exercise 3.11
Where is the local state for acc kept? Suppose we define another account

(define acc2 (make-account 100))

How are the local states for the two accounts kept distinct? Which parts of the environment
structure are shared between acc and acc2?

When `make-account` is called, a frame is bound to some free variable (acc2 in the example). This
frame will contain the definitions of `withdraw`, `deposit` and `dispatch` procedures. These 
procedures act upon a `balance` property, which is set when `make-account` is called. This value is
isolated between each call of `make-account`, this means that, `acc` and `acc2` are completely 
independent, since they keep their `balance` on their own frames.

The only parts of the environment shared by `acc` and `acc2` is the global environment.
* Exercise 3.17
Devise a correct version of the count-pairs procedure of exercise 3.16 that returns the number of
distinct pairs in any structure. (Hint: Traverse the structure, maintaining an auxiliary data
structure that is used to keep track of which pairs have already been counted.)

#+BEGIN_SRC scheme :results output
  (define (count-pairs xs)
    (define counted '())

    (define (count pair)
      (cond ((not (pair? pair)) 0)
            ((member (car pair) counted) 0)
            (else
             (set! counted (append counted (list (car pair))))
             (+ (count (car pair))
                (count (cdr pair))
                1))))
    (count xs))

  (define a (list 1 2 3))
  (define b (list 4 5 6))
  (display (count-pairs (append a b (list b))))
#+END_SRC

#+RESULTS:
: "7"

The result above corresponds to 6 for each different digit, plus 1 for the list created with
(list b).
* Exercise 3.18
Write a procedure that examines a list and determines whether it contains a cycle, that is,
whether a program that tried to find the end of the list by taking successive cdrs would go into an
infinite loop. Exercise 3.13 constructed such lists.

#+BEGIN_SRC scheme :results output
  (define (has-cycle? xs)
    (define checked '())

    (define (iter pair)
      (cond ((not (pair? pair)) #f)
            ((member pair checked) #t)
            (else
             (set! checked (append checked (list pair)))
             (if (pair? (car pair))
                 (and (iter (car pair))
                      (iter (cdr pair)))
                 (iter (cdr pair))))))
    (iter xs))

  (define (make-cycle x)
    (set-cdr! (last-pair x) x)
    x)

  (define a (list 1 2 3))
  (define b (list 4 5 6))
  (display (has-cycle? (make-cycle a)))
#+END_SRC

#+RESULTS:
: "#t"
* Exercise 3.19
Redo exercise 3.18 using an algorithm that takes only a constant amount of space. (This requires a
very clever idea.)

#+BEGIN_SRC scheme :results output
  (define (has-cycle? xs)
    (define (iter tortoise hare)
      (if (or (null? tortoise) (null? hare))
          #f
          (let* ((tortoise-value (car tortoise))
                 (hare-value (car hare)))
            (cond ((eq? tortoise-value hare-value) #t)
                  ((null? (cdr hare)) #f)
                  (else
                   (iter (cdr tortoise)
                         (cddr hare)))))))
    (iter xs (cdr xs)))

  (define (make-cycle x)
    (set-cdr! (last-pair x) x)
    x)

  (define a (list 1 2 3))
  (define b (list 4 5 6))
  (display (has-cycle? (make-cycle a)))
#+END_SRC

#+RESULTS:
: "#t"
* Queue
#+BEGIN_SRC scheme :results output
  (define (front-ptr queue) (car queue))
  (define (rear-ptr queue) (cdr queue))
  (define (set-front-ptr! queue item) (set-car! queue item))
  (define (set-rear-ptr! queue item) (set-cdr! queue item))
  (define (empty-queue? queue) (null? (front-ptr queue)))
  (define (make-queue) (cons '() '()))

  (define (front-queue queue)
    (if (empty-queue? queue)
        (error "FRONT called with an empty queue" queue)
        (car (front-ptr queue))))

  (define (insert-queue! queue item)
    (let ((new-pair (cons item '())))
      (cond ((empty-queue? queue)
             (set-front-ptr! queue new-pair)
             (set-rear-ptr! queue new-pair)
             queue)
            (else
             (set-cdr! (rear-ptr queue) new-pair)
             (set-rear-ptr! queue new-pair)
             queue))))

  (define (delete-queue! queue)
    (cond ((empty-queue? queue)
           (error "DELETE! called with an empty queue" queue))
          (else
           (set-front-ptr! queue (cdr (front-ptr queue)))
           queue)))

  (define q (make-queue))

  (display q)
  (newline)
  (insert-queue! q 'a)
  (display q)
  (newline)
  (insert-queue! q 'b)
  (insert-queue! q 'c)
  (display q)
  (newline)
  (display (front-queue q))
  (newline)
  (delete-queue! q)
  (display q)
  (newline)
  (display (front-queue q))
  (newline)
#+END_SRC

#+RESULTS:
: "(())\n((a) a)\n((a b c) c)\na\n((b c) c)\nb\n"

