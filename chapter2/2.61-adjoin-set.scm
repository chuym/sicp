(define (element-of-set? x set)
  (cond ((null? set) #f)
        ((= x (car set) #t))
        ((< x (car set) #f))
        (else (element-of-set? x (cdr set)))))

(define (adjoin-set x set)
  (define (iter left right)
    (cond ((null? right) (append left (list x)))
          ((= x (car right)) (append left right))
          ((< x (car right)) (append left (list x) right))
          (else (iter (append left (list (car right)))
                      (cdr right)))))
  (iter '() set))